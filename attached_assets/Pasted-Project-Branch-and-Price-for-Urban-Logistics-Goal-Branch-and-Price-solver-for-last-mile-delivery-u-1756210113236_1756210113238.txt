Project: Branch-and-Price for Urban Logistics
Goal

Branch-and-Price solver for last-mile delivery using drones, trucks, and metro.

RMP (Master Problem): choose routes/schedules (columns) â†’ demand, resources, inventory balance.

Pricing (RCSPP via label-setting):

Drones: ULA-D (basic), BLA-D (bidirectional)

Trucks: ULA-T (basic), BLA-T (bidirectional)

Metro: SELA-M (basic), BALA-M (big-arc)

ðŸ“‚ Code Layout
/data      â†’ 5 Excel inputs (raw)  
/output    â†’ Excel results  

data_loader.py      â†’ unify headers, parse time, build nodes/params/matrices, metro lookup  
data_structures.py  â†’ Column, Labels (Drone/Truck/Metro), BapNode  
main_bap.py         â†’ Algo 7 (Branch-and-Price loop w/ Gurobi RMP + pricing)  
algorithm1_â€¦6.py    â†’ Basic (1â€“3) + Optimized (4â€“6) pricing solvers  

ðŸ”‘ Core Data

Normalize headers (CNâ†’EN), e.g. èŠ‚ç‚¹ID â†’ node_id

Convert all times â†’ minutes from 00:00

Build: nodes, params, dist/time matrices, metro timetables

Time res: 1 min internal, 15 min resource slices

ðŸ§© Data Structures

Column(type, id, direct_cost, reduced_cost, details={a_ip, delta_up,â€¦})

Labels:

DroneLabel(time, load, energy, â€¦)

TruckLabel(time, load, â€¦)

MetroLabel / MetroBALabel

BapNode(id, parent_id, columns, constraints, lower_bound, â€¦)

ðŸ“‰ RMP (Gurobi)

Objective: resource + route costs

Constraints:

Demand served once

Resource caps per slice (drones, trucks)

Pilot caps per slice

Metro: â‰¤1 schedule/run

Inventory balance (up/down lines, capacity)

Branching constraints

Duals: extract inventory Ïˆ_up/Ïˆ_down for pricing

âš¡ Pricing (RCSPP)

Objective: reduced cost via Ïˆ duals

Cargo revenue/cost tied to Ïˆ_up, Ïˆ_down

Basic (1â€“3): unidirectional, stepwise metro

Optimized (4â€“6): bidirectional road/air; metro big-arcs

ðŸŒ² Branching

If LP fractional â†’ branch on variable (Î», Î¼) â†’ =0 / =1 â†’ enqueue node

ðŸ“Š Outputs (Excel)

Metro timetables (up/down)

Drone routes (per-leg load, energy)

Truck routes (per-leg load)

Shipments per train (up/down)

RMP bounds (iteration log)

Runtime comparison: basic (1â€“3) vs optimized (4â€“6)

ðŸš€ Roadmap

data_loader: normalize headers, parse times, build matrices/lookups

data_structures: define Column/Labels/BapNode

RMP builder: wrapper for Gurobi (model, duals, warm starts)

Pricing: Truck ULA-T â†’ Drone ULA-D â†’ Metro SELA-M â†’ optimized versions

B&P loop: column gen until no negative reduced cost â†’ branching

Excel writers: deterministic exporters (7 outputs)

Benchmark: compare basic vs optimized, log bounds & runtime